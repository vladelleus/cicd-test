name: Build Test Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  AWS_REGION: us-east-1
jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image for testing
        run: |
          docker build -t myapp:test-${{ github.sha }} -f $(pwd)/Dockerfiletest .

      - name: Run tests
        run: |
          docker run -d myapp:test-${{ github.sha }}
          docker container inspect $(docker ps -lq) --format='{{.State.ExitCode}}'

  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Install dependencies on remote host
        run: |
          eval "$(ssh-agent -s)"
          ssh-add <(echo "${{ secrets.SSH_PRIVATE_KEY }}")
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.INSTANCE_IP }} 'sudo yum update -y && sudo yum install -y docker git'
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.INSTANCE_IP }} 'sudo systemctl enable docker && sudo systemctl start docker'
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.INSTANCE_IP }} 'sudo usermod -aG docker ec2-user'

      - name: Run deployment script on remote host
        run: |
          scp -o StrictHostKeyChecking=no ./deploy.sh ec2-user@${{ secrets.INSTANCE_IP }}:/home/ec2-user/
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.INSTANCE_IP }} 'chmod +x /home/ec2-user/deploy.sh'
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.INSTANCE_IP }} '/home/ec2-user/deploy.sh ${{ secrets.REPO_NAME }}/myapp:latest'
